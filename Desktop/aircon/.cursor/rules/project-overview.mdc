---
alwaysApply: true
description: "aircon 프로젝트 전반적인 분석 및 구조 가이드"
---

# Aircon 프로젝트 개요

## 프로젝트 정보
- **프로젝트명**: aircon
- **버전**: 0.1.0
- **프레임워크**: Next.js 15.5.6 (App Router)
- **언어**: TypeScript
- **스타일링**: Tailwind CSS v4
- **UI 라이브러리**: shadcn/ui (New York 스타일)

## 필수 기억 요소
- **컴포넌트를 만들 땐 항상 Shadcn MCP를 사용해줘.**
- **UI를 만들 때 테마를 하드코딩 하지 말고 공통 테마를 사용해줘.**
- **컴포넌트를 만들고 나면 /components-demo 페이지에 데모 디스플레이 해줘.**
- **페이지를 만들 때는 꼭 공통 컴포넌트를 사용하도록 해줘.**
- **공통 컴포넌트는 prompts/components/ 폴더에 정의되어 있으니 참고해줘.**


## 기술 스택 분석

### 핵심 의존성
- **Next.js 15.5.6**: React 프레임워크, Turbopack 사용
- **React 19.1.0**: 최신 React 버전
- **TypeScript 5**: 타입 안전성
- **Tailwind CSS v4**: 최신 Tailwind CSS 버전
- **shadcn/ui**: 컴포넌트 라이브러리 (New York 스타일)

### 주요 라이브러리
- **lucide-react**: 아이콘 라이브러리
- **class-variance-authority**: 클래스 변형 관리
- **clsx**: 조건부 클래스명
- **tailwind-merge**: Tailwind 클래스 병합

## 프로젝트 구조

### 디렉토리 구조
```
src/
├── app/                    # Next.js App Router
│   ├── layout.tsx         # 루트 레이아웃
│   ├── page.tsx           # 홈페이지
│   ├── globals.css        # 전역 스타일
│   └── favicon.ico        # 파비콘
├── lib/                   # 유틸리티 함수
│   └── utils.ts           # 공통 유틸리티
├── components/            # 컴포넌트 (shadcn/ui)
└── prompts/               # PRD 및 컴포넌트 정의
    ├── components/        # 공통 컴포넌트 정의
    └── *.md              # 페이지별 PRD
```

### 설정 파일
- [package.json](mdc:package.json): 프로젝트 의존성 및 스크립트
- [components.json](mdc:components.json): shadcn/ui 설정
- [tsconfig.json](mdc:tsconfig.json): TypeScript 설정
- [next.config.ts](mdc:next.config.ts): Next.js 설정
- [eslint.config.mjs](mdc:eslint.config.mjs): ESLint 설정

## 주요 특징

### 1. 최신 기술 스택
- Next.js 15.5.6의 App Router 사용
- React 19.1.0 최신 버전
- Tailwind CSS v4 최신 버전
- Turbopack으로 빠른 개발 환경

### 2. shadcn/ui 통합
- New York 스타일의 UI 컴포넌트
- TypeScript 지원
- CSS 변수 기반 테마 시스템
- Lucide React 아이콘 라이브러리

### 3. 개발 환경 최적화
- Turbopack으로 빠른 빌드
- TypeScript strict 모드
- ESLint 코드 품질 관리
- PostCSS 설정

## 개발 가이드라인

### 코드 스타일
- TypeScript strict 모드 사용
- Tailwind CSS 클래스명 활용
- shadcn/ui 컴포넌트 우선 사용
- ESLint 규칙 준수

### 컴포넌트 개발
- `src/components/` 디렉토리에 컴포넌트 생성
- shadcn/ui 컴포넌트 확장 시 `src/components/ui/` 사용
- 재사용 가능한 유틸리티는 `src/lib/`에 배치
- **공통 컴포넌트는 prompts/components/ 폴더에 정의하고 페이지 개발 시 반드시 사용**
- **새로운 컴포넌트 개발 시 기존 공통 컴포넌트를 먼저 확인하고 재사용 우선**

### 스타일링
- Tailwind CSS 클래스 우선 사용
- CSS 변수를 통한 테마 관리
- 반응형 디자인 고려

## 현재 상태
- 기본 Next.js 템플릿 상태
- shadcn/ui 설정 완료
- TypeScript 및 Tailwind CSS 설정 완료
- 개발 환경 준비 완료

## 공통 컴포넌트 사용 규칙

### 필수 규칙
1. **페이지 개발 시 prompts/components/ 폴더의 공통 컴포넌트를 먼저 확인**
2. **기존 공통 컴포넌트로 구현 가능한 경우 반드시 재사용**
3. **새로운 컴포넌트가 필요한 경우 prompts/components/에 정의 후 사용**
4. **공통 컴포넌트 수정 시 모든 페이지에 영향 검토**

### 컴포넌트 우선순위
1. **prompts/components/ 공통 컴포넌트** (최우선)
2. **shadcn/ui 기본 컴포넌트**
3. **새로 개발하는 커스텀 컴포넌트**

## 다음 단계 권장사항
1. 프로젝트 목적에 맞는 페이지 구조 설계
2. shadcn/ui 컴포넌트 활용한 UI 개발
3. 상태 관리 라이브러리 고려 (필요시)
4. API 라우트 설계 (필요시)
5. 데이터베이스 연동 (필요시)